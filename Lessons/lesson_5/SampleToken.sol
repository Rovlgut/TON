
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract SampleToken {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call

    struct Token {
        string name;
        uint power;        
    }

    Token[] tokenArr;
    mapping (uint => uint) tokenToOwner;

    function createToken(string name, uint power) public {
        tvm.accept();
        // Проверки на права на создания
        tokenArr.push(Token(name, power));
        uint keyAsLastNum = tokenArr.length - 1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
        // транслировать
    }

    function getTokenOwner(uint tokenId) public view returns (uint) {
        // tvm.accept();
        return tokenToOwner[tokenId];
    }

    function getTokenInfo(uint tokenId) public view returns (string tokenName, uint tokenPower) {
        // tvm.accept();
        tokenName = tokenArr[tokenId].name;
        tokenPower = tokenArr[tokenId].power;
    }  

    function changeOwner(uint tokenId, uint pubKeyOfNewOwner) public {
        require(msg.pubkey() == tokenToOwner[tokenId], 101);
        tvm.accept();
        tokenToOwner[tokenId] = pubKeyOfNewOwner;        
    }

    function changePower(uint tokenId, uint power) public {
        require(msg.pubkey() == tokenToOwner[tokenId], 101);
        tvm.accept();
        tokenArr[tokenId].power = power;
        
    }
    
    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }

}
