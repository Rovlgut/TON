
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "MyInterface.sol";

// This is class that describes you smart contract.
contract BaseContract is MyInterface{
    
    uint private myParam;
    address public callerAddress;

    function myPublicFunction(uint v) virtual public override {
        tvm.accept();
        myParam = v;
        // save address of callee
        callerAddress = msg.sender;
    }

    function setParam(uint v) public {
        tvm.accept();
        require(v > 7);
        myParam = v;
    }

    function myExternalFunction(uint v) virtual external override {
        tvm.accept();
        myParam = v;
        // save address of callee
        callerAddress = msg.sender;
    }

    function myInternalFunction(uint v) virtual internal {
        tvm.accept();
        myParam = v;
        // save address of callee
        callerAddress = msg.sender;
    }

    function myPrivateFunction(uint v) private {
        tvm.accept();
        myParam = v;
        // save address of callee
        callerAddress = msg.sender;
    }

    function myGetParam() public view returns (uint) {
        tvm.accept();
        return myParam;
    }

    function myGetAddress() public view returns (address) {
        tvm.accept();
        return callerAddress;
    }

    function ckeckPrivate(uint v) public {
        tvm.accept();
        myPrivateFunction(v);
    }

    function ckeckExternal(uint v) public {
        tvm.accept();
        // myExternalFunction(v);
        this.myExternalFunction(v);
    }

    function ckeckInternal(uint v) public {
        tvm.accept();
        myInternalFunction(v);
    }

    function ckeckPublic(uint v) public {
        tvm.accept();
        myPublicFunction(v);
    }

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }

}
