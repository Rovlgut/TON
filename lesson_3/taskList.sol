
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract taskList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    struct task {

        string name;
        uint32 timestamp;
        bool isCompleted;       

    }

    mapping(uint8 => task) tasks;
    uint8 indexTasks = 1;
    uint8[] indexList;


    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
        
    }

	// Modifier that allows to accept some external messages
	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}


    function addTask(string name) public checkOwnerAndAccept{
     
        tasks[indexTasks] = task(name, now, false);
        indexList.push(indexTasks);
        indexTasks++;
        
    }

    function oppenedTasks(string name) public checkOwnerAndAccept returns (uint8){
        
        uint8 oppened = 0;
        for (uint i = 0; i<indexList.length; i++) {
            if (tasks[indexList[i]].isCompleted) {
                oppened++;
            }
        }        

        return oppened;
    }

    function listTasks(string name) public checkOwnerAndAccept returns (string[]){
        
        string[] list;
        for (uint i = 0; i<indexList.length; i++) {
            string status;
            if (tasks[indexList[i]].isCompleted) {
                status = "Completed";
            } else {
                status = "Not completed";
            }
            list.push(format("{} - {} {} {}", indexList[i], tasks[indexList[i]].name, tasks[indexList[i]].timestamp, status));
        }        

        return list;
    }

    function nameTasks(uint8 key) public checkOwnerAndAccept returns (string){

        return tasks[key].name;
    }


    function deleteTasks(uint8 key) public checkOwnerAndAccept {

        delete tasks[key];

        uint indexToDelete;
        for (uint i = 0; i<indexList.length; i++) {
            if (indexList[i] == key) {
                indexToDelete = i;
            }
        }        
        delete indexList[indexToDelete];   
    }

    function markComplete(uint8 key) public checkOwnerAndAccept returns (string){

        tasks[key].isCompleted = true;
    }

    function renderHelloWorld () public pure returns (string) {
        return 'helloWorld';
    }

    // Updates variable `timestamp` with current blockchain time.
    function touch() external {
        // Each function that accepts external message must check that
        // message is correctly signed.
        require(msg.pubkey() == tvm.pubkey(), 102);
        // Tells to the TVM that we accept this message.
        tvm.accept();
        // Update timestamp
        //timestamp = now;
    }

    function sendValue(address dest, uint128 amount, bool bounce) public view {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        // It allows to make a transfer with arbitrary settings
        dest.transfer(amount, bounce, 0);
    }
}
